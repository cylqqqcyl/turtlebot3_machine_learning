#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #
import os
import rospy
import time
from datetime import datetime
from gazebo_msgs.msg import ModelState, ModelStates
import pandas as pd
import numpy as np
dirPath = os.path.dirname(os.path.realpath(__file__))
trajPath = dirPath.replace('turtlebot3_dqn/nodes', 'turtlebot3_dqn/trajectory/')
x_obs = set('obstacle_x1','obstacle_x2','obstacle_x3')
y_obs = set('obstacle_y1','obstacle_y2','obstacle_y3')
class Combination():
    def __init__(self):
        self.pub_model = rospy.Publisher('gazebo/set_model_state', ModelState, queue_size=1)
        self.moving()

    def moving(self):
        state = 0
        while not rospy.is_shutdown():
            model = rospy.wait_for_message('gazebo/model_states', ModelStates)
            for i in range(len(model.name)):
                if model.name[i] in x_obs:
                    obstacle_1 = ModelState()
                    obstacle_1.model_name = model.name[i]
                    obstacle_1.pose = model.pose[i]
                    delta_x = 0.005
                    if abs(obstacle_1.pose.position.x - 7) < 0.05:
                        delta_x = - delta_x

                    elif abs(obstacle_1.pose.position.x + 7) < 0.05:
                        delta_x = delta_x
                    else:
                        pass
                    obstacle_1.pose.position.x += delta_x
                    self.pub_model.publish(obstacle_1)
                    time.sleep(0.1)

                elif model.name[i] in y_obs:
                    obstacle_1 = ModelState()
                    obstacle_1.model_name = model.name[i]
                    obstacle_1.pose = model.pose[i]
                    delta_y = 0.005
                    if abs(obstacle_1.pose.position.y - 6.5) < 0.05:
                        delta_y = - delta_y

                    elif abs(obstacle_1.pose.position.y + 6.5) < 0.05:
                        delta_y = delta_y
                    else:
                        pass

                    self.pub_model.publish(obstacle_1)
                    time.sleep(0.1)
                else:
                    pass

def main():
    rospy.init_node('combination_obstacle_1')
    try:
        combination = Combination()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()