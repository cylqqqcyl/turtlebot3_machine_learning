#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import os
import json
import numpy as np
import random
import time
import sys
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from collections import deque
from std_msgs.msg import Float32MultiArray
from src.turtlebot3_dqn.environment_stage_4 import Env
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf


EPISODES = 3000

#####################  hyper parameters  ####################

RANDOMSEED = 1              # random seed

LR_A = 0.00025                # learning rate for actor
LR_C = 0.0005              # learning rate for critic
GAMMA = 0.9                 # reward discount
TAU = 0.01                  # soft replacement
MEMORY_CAPACITY = 10000     # size of replay buffer
BATCH_SIZE = 64             # update batchsize

MAX_EPISODES = 200          # total number of episodes for training
MAX_EP_STEPS = 200          # total number of steps for each episode
TEST_PER_EPISODES = 10      # test the model per episodes
VAR = 3                     # control exploration

###############################  DDPG  ####################################

class DDPG(object):
    """
    DDPG class
    """
    def __init__(self, a_dim, s_dim, a_bound = 0):
        # memory用于储存跑的数据的数组：
        # 保存个数MEMORY_CAPACITY，s_dim * 2 + a_dim + 1：分别是两个state，一个action，和一个reward
        self.memory = np.zeros((MEMORY_CAPACITY, s_dim * 2 + a_dim + 1), dtype=np.float32)
        self.pointer = 0
        self.a_dim, self.s_dim, self.a_bound = a_dim, s_dim, a_bound

        kernel_initializer = tf.random_normal_initializer(mean=0, stddev=0.3)
        bias_initializer = tf.constant_initializer(0.1)

        # 建立actor网络，输入s，输出a
        def get_actor(input_state_shape, name=''):
            """
            Build actor network
            :param input_state_shape: state
            :param name: name
            :return: act
            """
            inputs = tf.keras.layers.Input(input_state_shape, name='A_input')
            x = tf.keras.layers.Dense(units=30, activation=tf.nn.relu, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer, name='A_l1')(inputs)
            x = tf.keras.layers.Dense(units=a_dim, activation=tf.nn.tanh, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer, name='A_a')(x)
            # x = tf.keras.layers.Lambda(lambda x: np.array(a_bound) * x)(x)            #注意这里，先用tanh把范围限定在[-1,1]之间，再进行映射
            return tf.keras.models.Model(inputs=inputs, outputs=x, name='Actor' + name)

        #建立Critic网络，输入s，a。输出Q值
        def get_critic(input_state_shape, input_action_shape, name=''):
            """
            Build critic network
            :param input_state_shape: state
            :param input_action_shape: act
            :param name: name
            :return: Q value Q(s,a)
            """
            s = tf.keras.layers.Input(input_state_shape, name='C_s_input')
            a = tf.keras.layers.Input(input_action_shape, name='C_a_input')
            x = tf.keras.layers.Concatenate()([s, a])
            x = tf.keras.layers.Dense(units=60, activation=tf.nn.relu, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer, name='C_l1')(x)
            x = tf.keras.layers.Dense(units=1, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer, name='C_out')(x)
            return tf.keras.models.Model(inputs=[s, a], outputs=x, name='Critic' + name)

        self.actor = get_actor([s_dim])
        self.critic = get_critic([s_dim], [a_dim])
        self.actor.compile(optimizer='adam', loss='mean_squared_error')
        self.critic.compile(optimizer='adam', loss='mean_squared_error')
        self.actor.summary()
        self.critic.summary()

        #更新参数，只用于首次赋值，之后就没用了
        def copy_para(from_model, to_model):
            """
            Copy parameters for soft updating
            :param from_model: latest model
            :param to_model: target model
            :return: None
            """
            for i, j in zip(from_model.trainable_weights, to_model.trainable_weights):
                j.assign(i)

        #建立actor_target网络，并和actor参数一致，不能训练
        self.actor_target = get_actor([None, s_dim], name='_target')
        copy_para(self.actor, self.actor_target)
        # self.actor_target.eval()

        #建立critic_target网络，并和actor参数一致，不能训练
        self.critic_target = get_critic([None, s_dim], [None, a_dim], name='_target')
        copy_para(self.critic, self.critic_target)
        # self.critic_target.eval()

        self.actor_target.compile(optimizer='adam', loss='mean_squared_error')
        self.critic_target.compile(optimizer='adam', loss='mean_squared_error')

        self.R = tf.keras.layers.Input([None, 1], dtype=tf.float32, name='r')

        #建立ema，滑动平均值
        self.ema = tf.train.ExponentialMovingAverage(decay=1 - TAU)  # soft replacement

        self.actor_opt = tf.keras.optimizers.Adam(LR_A)
        self.critic_opt = tf.keras.optimizers.Adam(LR_C)


    def ema_update(self):
        """
        滑动平均更新
        """
        # 其实和之前的硬更新类似，不过在更新赋值之前，用一个ema.average。
        paras = self.actor.trainable_weights + self.critic.trainable_weights    #获取要更新的参数包括actor和critic的
        self.ema.apply(paras)                                                   #主要是建立影子参数
        for i, j in zip(self.actor_target.trainable_weights + self.critic_target.trainable_weights, paras):
            i.assign(self.ema.average(j))                                       # 用滑动平均赋值

    # 选择动作，把s带进入，输出a
    def choose_action(self, s):
        """
        Choose action
        :param s: state
        :return: act
        """
        return self.actor.predict_on_batch(np.array([s], dtype=np.float32))[0]

    def learn(self):
        """
        Update parameters
        :return: None
        """
        indices = np.random.choice(MEMORY_CAPACITY, size=BATCH_SIZE)    #随机BATCH_SIZE个随机数
        bt = self.memory[indices, :]                    #根据indices，选取数据bt，相当于随机
        bs = bt[:, :self.s_dim]                         #从bt获得数据s
        ba = bt[:, self.s_dim:self.s_dim + self.a_dim]  #从bt获得数据a
        br = bt[:, -self.s_dim - 1:-self.s_dim]         #从bt获得数据r
        bs_ = bt[:, -self.s_dim:]                       #从bt获得数据s'

        # Critic：
        # Critic更新和DQN很像，不过target不是argmax了，是用critic_target计算出来的。
        # br + GAMMA * q_
        with tf.GradientTape() as tape:
            a_ = self.actor_target(bs_)
            q_ = self.critic_target([bs_, a_])
            y = br + GAMMA * q_
            q = self.critic([bs, ba])
            td_error = tf.losses.mean_squared_error(y, q)
        c_grads = tape.gradient(td_error, self.critic.trainable_weights)
        self.critic_opt.apply_gradients(zip(c_grads, self.critic.trainable_weights))

        # Actor：
        # Actor的目标就是获取最多Q值的。
        with tf.GradientTape() as tape:
            a = self.actor(bs)
            q = self.critic([bs, a])
            self.q_value = q
            a_loss = -tf.reduce_mean(q)  # 【敲黑板】：注意这里用负号，是梯度上升！也就是离目标会越来越远的，就是越来越大。
        a_grads = tape.gradient(a_loss, self.actor.trainable_weights)
        self.actor_opt.apply_gradients(zip(a_grads, self.actor.trainable_weights))

        self.ema_update()


    # 保存s，a，r，s_
    def store_transition(self, s, a, r, s_):
        """
        Store data in data buffer
        :param s: state
        :param a: act
        :param r: reward
        :param s_: next state
        :return: None
        """
        # 整理s，s_,方便直接输入网络计算
        s = s.astype(np.float32)
        s_ = s_.astype(np.float32)

        #把s, a, [r], s_横向堆叠
        transition = np.hstack((s, a, [r], s_))

        #pointer是记录了曾经有多少数据进来。
        #index是记录当前最新进来的数据位置。
        #所以是一个循环，当MEMORY_CAPACITY满了以后，index就重新在最底开始了
        index = self.pointer % MEMORY_CAPACITY  # replace the old memory with new memory
        #把transition，也就是s, a, [r], s_存进去。
        self.memory[index, :] = transition
        self.pointer += 1

    def save_ckpt(self, episode_num):
        """
        save trained weights
        :return: None
        """
        if not os.path.exists('model'):
            os.makedirs('model')
        episode_num = str(episode_num)
        tf.keras.models.save_model(self.actor, 'model/ddpg_actor_'+episode_num+'.h5')
        tf.keras.models.save_model(self.actor_target, 'model/ddpg_actor_target_+'+episode_num+'.h5')
        tf.keras.models.save_model(self.critic, 'model/ddpg_critic_'+episode_num+'.h5')
        tf.keras.models.save_model(self.critic_target, 'model/ddpg_critic_target_'+episode_num+'.h5')

    def load_ckpt(self):
        """
        load trained weights
        :return: None
        """
        self.actor = tf.keras.models.load_model('model/ddpg_actor.h5')
        self.actor_target = tf.keras.models.load_model('model/ddpg_actor_target.h5')
        self.critic = tf.keras.models.load_model('model/ddpg_critic.h5')
        self.critic_target = tf.keras.models.load_model('model/ddpg_critic_target.h5')

if __name__ == '__main__':

    rospy.init_node('turtlebot3_dqn_stage_4')
    pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
    pub_get_action = rospy.Publisher('get_action', Float32MultiArray, queue_size=5)
    result = Float32MultiArray()
    get_action = Float32MultiArray()

    state_size = 28
    action_size = 5

    # 初始化环境
    env = Env(action_size)

    # 定义状态空间，动作空间，动作幅度范围
    s_dim = state_size
    a_dim = action_size

    print('s_dim', s_dim)
    print('a_dim', a_dim)

    # 用DDPG算法
    ddpg = DDPG(a_dim, s_dim)

    # 训练部分：
    # train

    reward_buffer = []  # 用于记录每个EP的reward，统计变化
    t0 = time.time()  # 统计时间
    for i in range(MAX_EPISODES):
        t1 = time.time()
        s = env.reset()
        ep_reward = 0  # 记录当前EP的reward
        for j in range(MAX_EP_STEPS):
            # Add exploration noise
            a = ddpg.choose_action(s)  # 这里很简单，直接用actor估算出a动作

            # 为了能保持开发，这里用了另外一种方式增加探索。
            # 因此需要需要以a为均值，VAR为标准差，建立正态分布，再从正态分布采样出a
            # 因为a是均值，所以a的概率是最大的。但a相对其他概率由多大，是靠VAR调整。这里我们其实可以增加更新VAR，动态调整a的确定性
            # 然后进行裁剪
            a = np.clip(np.random.normal(a, VAR), -2, 2)

            action = np.argmax(a)
            # 与环境进行互动
            s_, r, done= env.step(action)

            # 保存s，a，r，s_
            ddpg.store_transition(s, a, r / 10, s_)

            # 第一次数据满了，就可以开始学习
            if ddpg.pointer > MEMORY_CAPACITY:
                ddpg.learn()

            # 输出数据记录
            s = s_
            ep_reward += r  # 记录当前EP的总reward

            get_action.data = [a, ep_reward, r]
            pub_get_action.publish(get_action)

            if i % 10 == 0:
                ddpg.save_ckpt(i)

            if j == MAX_EP_STEPS - 1:
                print(
                    '\rEpisode: {}/{}  | Episode Reward: {:.4f}  | Running Time: {:.4f}'.format(
                        i, MAX_EPISODES, ep_reward,
                        time.time() - t1
                    )
                )
            plt.show()
        result.data = [ep_reward, np.max(ddpg.q_value)]
        pub_result.publish(result)
        # test
        if i and not i % TEST_PER_EPISODES:
            t1 = time.time()
            s = env.reset()
            ep_reward = 0
            for j in range(MAX_EP_STEPS):

                a = ddpg.choose_action(s)  # 注意，在测试的时候，我们就不需要用正态分布了，直接一个a就可以了。
                s_, r, done = env.step(a)

                s = s_
                ep_reward += r
                if j == MAX_EP_STEPS - 1:
                    print(
                        '\rEpisode: {}/{}  | Episode Reward: {:.4f}  | Running Time: {:.4f}'.format(
                            i, MAX_EPISODES, ep_reward,
                            time.time() - t1
                        )
                    )

                    reward_buffer.append(ep_reward)

        if reward_buffer:
            plt.ion()
            plt.cla()
            plt.title('DDPG')
            plt.plot(np.array(range(len(reward_buffer))) * TEST_PER_EPISODES, reward_buffer)  # plot the episode vt
            plt.xlabel('episode steps')
            plt.ylabel('normalized state-action value')
            plt.ylim(-2000, 0)
            plt.show()
            plt.pause(0.1)
    plt.ioff()
    plt.show()
    print('\nRunning time: ', time.time() - t0)
    # ddpg.save_ckpt()

    # test
    # ddpg.load_ckpt()
    # while True:
    #     s = env.reset()
    #     for i in range(MAX_EP_STEPS):
    #         env.render()
    #         s, r, done, info = env.step(ddpg.choose_action(s))
    #         if done:
    #             break




    # agent = ReinforceAgent(state_size, action_size)
    # scores, episodes = [], []
    # global_step = 0
    # start_time = time.time()
    #
    # for e in range(agent.load_episode + 1, EPISODES):
    #     done = False
    #     state = env.reset()
    #     score = 0
    #     for t in range(agent.episode_step):
    #         action = agent.getAction(state)
    #
    #         next_state, reward, done = env.step(action)
    #
    #         agent.appendMemory(state, action, reward, next_state, done)
    #
    #         if len(agent.memory) >= agent.train_start:
    #             if global_step <= agent.target_update:
    #                 agent.trainModel()
    #             else:
    #                 agent.trainModel(True)
    #
    #         score += reward
    #         state = next_state
    #         get_action.data = [action, score, reward]
    #         pub_get_action.publish(get_action)
    #
    #         if e % 10 == 0:
    #             agent.model.save(agent.dirPath + str(e) + '.h5')
    #             with open(agent.dirPath + str(e) + '.json', 'w') as outfile:
    #                 json.dump(param_dictionary, outfile)
    #
    #         if t >= 500:
    #             rospy.loginfo("Time out!!")
    #             done = True
    #
    #         if done:
    #             result.data = [score, np.max(agent.q_value)]
    #             pub_result.publish(result)
    #             agent.updateTargetModel()
    #             scores.append(score)
    #             episodes.append(e)
    #             m, s = divmod(int(time.time() - start_time), 60)
    #             h, m = divmod(m, 60)
    #
    #             rospy.loginfo('Ep: %d score: %.2f memory: %d epsilon: %.2f time: %d:%02d:%02d',
    #                           e, score, len(agent.memory), agent.epsilon, h, m, s)
    #             param_keys = ['epsilon']
    #             param_values = [agent.epsilon]
    #             param_dictionary = dict(zip(param_keys, param_values))
    #             break
    #
    #         global_step += 1
    #         if global_step % agent.target_update == 0:
    #             rospy.loginfo("UPDATE TARGET NETWORK")
    #
    #     if agent.epsilon > agent.epsilon_min:
    #         agent.epsilon *= agent.epsilon_decay